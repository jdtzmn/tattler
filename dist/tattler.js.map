{"version":3,"sources":["tattler.ts"],"names":[],"mappings":";;;;;;;;;;;;IAIqB;;;AAMnB,mBAAoB,eAApB,EAAuD;AAAA;;AAAA;;AACrD,SAAK,eAAL,GAAuB,eAAvB;AAEA,SAAK,MAAL,GAAc,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAY;AACpC,MAAA,KAAI,CAAC,EAAL,GAAU,OAAV;AACD,KAFa,CAAd;;AAIA,SAAK,eAAL,GAAuB;AAAA,aAAa,eAAe,MAAf,oBACjC,IADiC,CAC5B,KAAI,CAAC,aAAL,CAAmB,KAAI,CAAC,EAAxB,CAD4B,CAAb;AAAA,KAAvB;AAED;;;;kCAEsB,IAAoB;AACzC,aAAO,UAAC,MAAD,EAAgB;AACrB,YAAI,EAAE,KAAK,SAAX,EAAsB;AACpB,UAAA,EAAE,CAAC,MAAD,CAAF;AACD;;AACD,eAAO,MAAP;AACD,OALD;AAMD;;;8BAU6B;AAAA;;AAAA,wCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AAC5B,WAAK,eAAL,GAAuB;AAAA,eAAM,MAAI,CAAC,eAAL,OAAA,MAAI,EAAoB,IAApB,CAAJ,CAC1B,IAD0B,CACrB,MAAI,CAAC,aAAL,CAAmB,MAAI,CAAC,EAAxB,CADqB,CAAN;AAAA,OAAvB;AAED;;;wBAXe;AACd,aAAO,KAAK,eAAZ;AACD;;;wBAEc;AACb,aAAO,KAAK,MAAZ;AACD;;;;;;AAhCH,OAAA,CAAA,OAAA,GAAA,OAAA","file":"tattler.js","sourceRoot":"..","sourcesContent":["type AnyPromiseFunction = (...args: any) => Promise<any>\n\ntype ResolveFunction = (value?: unknown) => void\n\nexport default class Tattler {\n  private uncalledPromise: AnyPromiseFunction // the promise function to be wrapped\n  private cb?: ResolveFunction // the resolve function that is defined later\n  private promiseFunction: AnyPromiseFunction // the function that when called returns the promise\n  private tattle: Promise<any>\n\n  public constructor (uncalledPromise: AnyPromiseFunction) {\n    this.uncalledPromise = uncalledPromise\n\n    this.tattle = new Promise((resolve) => {\n      this.cb = resolve\n    })\n\n    this.promiseFunction = (...args) => uncalledPromise(...args)\n      .then(this.createHandler(this.cb))\n  }\n\n  private createHandler (cb?: ResolveFunction): ResolveFunction {\n    return (result: any) => {\n      if (cb !== undefined) {\n        cb(result)\n      }\n      return result\n    }\n  }\n\n  public get mimic () {\n    return this.promiseFunction\n  }\n\n  public get wait () {\n    return this.tattle\n  }\n\n  public setArgs (...args: any[]) {\n    this.promiseFunction = () => this.uncalledPromise(...args)\n      .then(this.createHandler(this.cb))\n  }\n}\n"]}